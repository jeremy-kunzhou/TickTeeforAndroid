package com.huhukun.tickteeforandroid.model;

import android.app.ActionBar;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import com.huhukun.tickteeforandroid.App_Constants;

/**
 * Created by kun on 19/08/2014.
 */
public class SqlOpenHelper extends SQLiteOpenHelper {

    private static final String TAG = App_Constants.APP_TAG +"SqlOpenHelper";
    public static final String DB_NAME = "projectsdb.sqlite";
    public static final int VERSION = 1;



    public static class TableConstants {
        public static final String TABLE_NAME = "projects";
        public static final String _ID = "_id";
        public static final String COL_PROJECT_ID = "project_id";
        public static final String COL_NAME = "name";
        public static final String COL_START_AT = "start_at";
        public static final String COL_END_AT = "end_at";
        public static final String COL_EXPECTED_PROGRESS = "expected_progress";
        public static final String COL_CURRENT_PROGRESS = "current_progress";
        public static final String COL_CREATED_AT = "created_at";
        public static final String COL_UPDATED_AT = "updated_at";
        public static final String COL_DESCRIPTION = "description";
        public static final String COL_TARGET = "target";
        public static final String COL_UNIT = "unit";
        public static final String COL_ALERT_TYPE = "alert_type";
        public static final String COL_IS_DECIMAL = "is_decimal_unit";
        public static final String COL_INIT_PROGRESS = "init_progress";
        public static final String COL_IS_CONSUMED = "is_consumed";
        public static final String COL_STATUS = "status";
        public static final String COL_TRANSACTING = "transacting";
        public static final String COL_RESULT = "result";
        public static final String COL_TRANS_DATE = "trans_date";
        public static final String COL_TRY_COUNT = "try_count";
        public static final String DEFAULT_SORT_ORDER = COL_NAME+" ASC";
    }


    public static final String[] LOADER_COLUMNS = new String[]{
            TableConstants._ID,
            TableConstants.COL_PROJECT_ID,
            TableConstants.COL_NAME,
            TableConstants.COL_DESCRIPTION,
            TableConstants.COL_START_AT,
            TableConstants.COL_END_AT,
            TableConstants.COL_EXPECTED_PROGRESS,
            TableConstants.COL_CURRENT_PROGRESS,
            TableConstants.COL_CREATED_AT,
            TableConstants.COL_UPDATED_AT,
            TableConstants.COL_TARGET,
            TableConstants.COL_UNIT,
            TableConstants.COL_ALERT_TYPE,
            TableConstants.COL_IS_DECIMAL,
            TableConstants.COL_INIT_PROGRESS,
            TableConstants.COL_IS_CONSUMED,
            TableConstants.COL_TRANSACTING,
            TableConstants.COL_STATUS,
            TableConstants.COL_RESULT,
            TableConstants.COL_TRANS_DATE};
    /**
     * table name: songs
     *
     * _ID: the primary key generated by the SQLite database
     * songs_id: a unique ID generated by the REST API
     * title: the song title
     * artist: the singer/performer/band
     * status: GET|POST|PUT|DELETE|NEW
     * transacting:
     *   TRANSACTION_PENDING = 0
     *   TRANSACTION_RETRY = 1
     *   TRANSACTION_IN_PROGRESS = 2
     *   TRANSACTION_COMPLETED = 3
     * result: the HttpStatus code
     * trans_date: Date and time the sync transaction was requested.
     *   For GET requests the date the row was inserted/updated.
     * try_count: Number of times the sync operation has been attempted
     *   for this resource.
     */
    private static final String PROJECTS_CREATE_TABLE =
            "CREATE TABLE " + TableConstants.TABLE_NAME + " ("
                    + TableConstants._ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
                    + TableConstants.COL_PROJECT_ID + " INTEGER, "
                    + TableConstants.COL_NAME + " TEXT, "
                    + TableConstants.COL_DESCRIPTION + " TEXT, "
                    + TableConstants.COL_START_AT + " DATETIME, "
                    + TableConstants.COL_END_AT + " DATETIME, "
                    + TableConstants.COL_EXPECTED_PROGRESS + " REAL, "
                    + TableConstants.COL_CURRENT_PROGRESS + " REAL, "
                    + TableConstants.COL_CREATED_AT + " DATETIME, "
                    + TableConstants.COL_UPDATED_AT + " DATETIME, "
                    + TableConstants.COL_TARGET + " REAL, "
                    + TableConstants.COL_UNIT + " TEXT, "
                    + TableConstants.COL_ALERT_TYPE + " TEXT, "
                    + TableConstants.COL_IS_DECIMAL + " BOOLEAN, "
                    + TableConstants.COL_INIT_PROGRESS + " REAL, "
                    + TableConstants.COL_IS_CONSUMED + " BOOLEAN, "
                    + TableConstants.COL_STATUS + " TEXT, "
                    + TableConstants.COL_TRANSACTING + " INTEGER, "
                    + TableConstants.COL_RESULT + " INTEGER, "
                    + TableConstants.COL_TRANS_DATE + " DATETIME, "
                    + TableConstants.COL_TRY_COUNT + " INTEGER);";

    private static final String SONGS_CREATE_INDEX =
            "CREATE UNIQUE INDEX songs_id_idx ON " +
                    TableConstants.TABLE_NAME +
                    "(" + TableConstants.COL_PROJECT_ID + ");";


    public SqlOpenHelper( Context context )
    {
        super( context, DB_NAME, null, VERSION );
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(PROJECTS_CREATE_TABLE);
        db.execSQL(SONGS_CREATE_INDEX);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + TableConstants.TABLE_NAME );
        onCreate(db);
    }
}
